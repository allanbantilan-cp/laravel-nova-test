pipeline {
    environment {
        SONAR_HOME = tool name: 'SonarScanner'
        PROJECT_CODE_SOURCES = 'app,config,resources,routes,nova-components,tests'
        SONAR_PROJECT_KEY = 'lmrch'
        SONAR_PROJECT_VERSION = '1.0'
    }
    agent {
        kubernetes {
            label 'lmrch-web'
            yamlFile './jenkins/pod-lmrch-web-pipeline.yaml'
        }
    }
    stages {
        stage ('Application setup') {
            steps {
                container('lmrch-web') {
                    sh '''
                    pwd
                    ls -alh
                    composer config http-basic.nova.laravel.com chris.bautista@coreproc.ph xsCQxO0h6C0vAtSfHBSUGEWrntXn3JazOlvzxzDRxHRr3uAdky
                    composer install --no-ansi --no-interaction --no-progress --optimize-autoloader
                    php artisan migrate --force
                    npm install
                    npm run build
                    '''
                }
            }
        }
        stage ('Packages security check') {
            steps {
                container('lmrch-web') {
                    sh '''
                    php artisan security-check:now
                    '''
                }
            }
        }
        stage ('Code style check') {
            steps {
                container('lmrch-web') {
                    sh '''
                    ./vendor/bin/phpcs
                    '''
                }
            }
        }
        stage ('Run tests') {
            steps {
                container('lmrch-web') {
                    sh '''
                    php artisan test --coverage
                    '''
                }
            }
        }
        stage ('SonarQube') {
            steps {
                withSonarQubeEnv('deepsonarqube') {
                    sh '''
                    ${SONAR_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                        -Dsonar.sources=${PROJECT_CODE_SOURCES} \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}
                    '''
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'tests/Coverage/html',
                reportFiles: 'index.html',
                reportName: 'PHPUnit Test Coverage',
                reportTitles: '',
                useWrapperFileDirectly: true
            ])
        }
    }
}
