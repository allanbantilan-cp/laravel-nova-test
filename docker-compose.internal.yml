services:
  web:
    build:
      dockerfile: Dockerfile
      args:
        WEB_UID: ${WEB_UID:-114}
        WEB_GID: ${WEB_GID:-121}
    volumes:
      - .:/app
    environment:
      CI_MIGRATION_TYPE: ${CI_MIGRATION_TYPE:-migrate}
      AWS_URL: 'https://${BUILD_MINIO_DOMAIN}'
      AWS_ENDPOINT: 'https://${BUILD_MINIO_DOMAIN}'
      AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
      AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
      AWS_USE_PATH_STYLE_ENDPOINT: 'true'
      CI_NTFY_USERNAME: '${CI_NTFY_USERNAME}'
      CI_NTFY_PASSWORD: '${CI_NTFY_PASSWORD}'
      CI_NTFY_URL: '${CI_NTFY_URL}'
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${TRAEFIK_WEB_SERVICE:-laravel-web}.entrypoints=websecure"
      - "traefik.http.routers.${TRAEFIK_WEB_SERVICE:-laravel-web}.rule=Host(`${BUILD_APP_DOMAIN}`)"
      - "traefik.http.routers.${TRAEFIK_WEB_SERVICE:-laravel-web}.tls=true"
      - "traefik.http.routers.${TRAEFIK_WEB_SERVICE:-laravel-web}.tls.certresolver=default"
      - "traefik.http.services.${TRAEFIK_WEB_SERVICE:-laravel-web}.loadbalancer.server.port=${BUILD_CONTAINER_PORT:-80}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/healthcheck" ]
      interval: 10s
      timeout: 5s
      retries: 10
  job:
    build:
      dockerfile: Dockerfile
      args:
        WEB_UID: ${WEB_UID:-114}
        WEB_GID: ${WEB_GID:-121}
    volumes:
      - .:/app
    environment:
      CONTAINER_ROLE: 'job'
      AWS_URL: 'https://${BUILD_MINIO_DOMAIN}'
      AWS_ENDPOINT: 'https://${BUILD_MINIO_DOMAIN}'
      AWS_ACCESS_KEY_ID: '${AWS_ACCESS_KEY_ID}'
      AWS_SECRET_ACCESS_KEY: '${AWS_SECRET_ACCESS_KEY}'
      AWS_USE_PATH_STYLE_ENDPOINT: 'true'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
  mysql:
    image: 'mysql:8.0.33'
    hostname: mysql
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - 'app-mysql:/var/lib/mysql'
      - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
    networks:
      - app-network
    healthcheck:
      test:
        - CMD
        - mysqladmin
        - ping
        - '-p${DB_PASSWORD}'
      retries: 3
      timeout: 5s
  redis:
    image: 'redis:alpine'
    hostname: redis
    volumes:
      - 'app-redis:/data'
    networks:
      - app-network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
  s3:
    hostname: minio
    image: 'minio/minio:latest'
    environment:
      MINIO_ROOT_USER: '${AWS_ACCESS_KEY_ID:-AKIAIOSFODNN7EXAMPLE}'
      MINIO_ROOT_PASSWORD: '${AWS_SECRET_ACCESS_KEY:-wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY}'
      MINIO_DEFAULT_BUCKET: '${AWS_BUCKET:-default_bucket}'
      MINIO_BROWSER_REDIRECT_URL: 'https://${BUILD_MINIO_CONSOLE_DOMAIN}'
    volumes:
      - 'app-minio:/data/minio'
    networks:
      - app-network
    command: minio server /data/minio --console-address ":${FORWARD_MINIO_CONSOLE_PORT:-8900}" --address ":${FORWARD_MINIO_PORT:-9001}"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.constraint-label=app-network"
      - "traefik.http.routers.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.service=${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}"
      - "traefik.http.routers.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.entrypoints=websecure"
      - "traefik.http.routers.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.tls=true"
      - "traefik.http.routers.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.tls.certresolver=default"
      - "traefik.http.routers.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.rule=Host(`${BUILD_MINIO_DOMAIN}`)"
      - "traefik.http.services.${TRAEFIK_S3_API_SERVICE:-laravel-s3-api}.loadbalancer.server.port=${FORWARD_MINIO_PORT:-9001}"
      - "traefik.http.routers.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.service=${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}"
      - "traefik.http.routers.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.entrypoints=websecure"
      - "traefik.http.routers.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.tls=true"
      - "traefik.http.routers.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.tls.certresolver=default"
      - "traefik.http.routers.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.rule=Host(`${BUILD_MINIO_CONSOLE_DOMAIN}`)"
      - "traefik.http.services.${TRAEFIK_S3_CONSOLE_SERVICE:-laravel-s3-console}.loadbalancer.server.port=${FORWARD_MINIO_CONSOLE_PORT:-8900}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${FORWARD_MINIO_PORT:-9001}/minio/health/live" ]
      retries: 3
      timeout: 5s
  # Create a service that only creates a default bucket.
  createbuckets:
    image: minio/mc
    depends_on:
      - s3
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9001 ${AWS_ACCESS_KEY_ID:-AKIAIOSFODNN7EXAMPLE} ${AWS_SECRET_ACCESS_KEY:-wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY};
      if ! /usr/bin/mc ls myminio/${AWS_BUCKET:-storage-local} > /dev/null 2>&1 ; then
        /usr/bin/mc mb myminio/${AWS_BUCKET:-storage-local};
        /usr/bin/mc policy set download myminio/${AWS_BUCKET:-storage-local};
      fi;
      exit 0;
      "
networks:
  app-network:
    driver: bridge
volumes:
  app-mysql:
    driver: local
  app-redis:
    driver: local
  app-minio:
    driver: local
